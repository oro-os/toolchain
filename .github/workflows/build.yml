name: Build Toolchain
on:
  push:
    branches:
      - master

env:
  RUST_BACKTRACE: full

jobs:
  build-llvm:
    strategy:
      fail-fast: true
      matrix:
        os:
          - runner: ubuntu-latest
            name: linux
          - runner: macos-latest
            name: apple
    runs-on: ${{ matrix.os.runner }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Install Dependencies
        if: matrix.os.name == 'linux'
        shell: bash
        run: sudo apt-get update && sudo apt-get install -y build-essential git cmake ninja-build python3 ccache
      - name: Install Dependencies
        if: matrix.os.name == 'apple'
        shell: bash
        run: brew install --quiet ccache git cmake ninja
      - name: Setup Cache
        id: cache
        uses: actions/cache@v4
        with:
          path: build/llvm/
          key: ${{runner.os}}-artifacts-llvm-${{github.run_id}}-${{github.run_attempt}}
          restore-keys: |
            ${{runner.os}}-artifacts-llvm-${{github.run_id}}-
            ${{runner.os}}-artifacts-llvm-
      - name: Build LLVM
        shell: bash
        run: |
          export CCACHE_DIR="$(pwd)/build/llvm/.ccache"
          export CCACHE_COMPRESS=1
          export CCACHE_COMPRESSLEVEL=6
          export CCACHE_MAXSIZE=400M
          mkdir -p build/llvm/.ccache
          ccache -z
          cmake -G Ninja -S llvm-project/llvm -B build/llvm -GNinja -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_PROJECTS="clang;lld" -DLLVM_TARGETS_TO_BUILD="X86;AArch64" -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
          ninja -C build/llvm
          ccache -s

  build-rust:
    strategy:
      fail-fast: true
      matrix:
        os:
          - runner: ubuntu-latest
            name: linux
            config: rust-config-linux.toml
          - runner: macos-latest
            name: apple
            config: rust-config-apple.toml
    runs-on: ${{ matrix.os.runner }}
    needs: build-llvm
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Install Dependencies
        if: matrix.os.name == 'linux'
        shell: bash
        run: sudo apt-get update && sudo apt-get install -y build-essential git cmake ninja-build python3
      - name: Install Dependencies
        if: matrix.os.name == 'apple'
        shell: bash
        run: brew install --quiet git cmake ninja zstd && brew link --force --overwrite zstd
      - name: Restore LLVM Cache
        id: llvm-cache-restore
        uses: actions/cache/restore@v4
        with:
          path: build/llvm/
          key: ${{ runner.os }}-artifacts-llvm-${{ github.run_id }}-${{ github.run_attempt }}
          restore-keys: ${{ runner.os }}-artifacts-llvm-${{ github.run_id }}-
          fail-on-cache-miss: true
      - name: Set up Rust Cache
        id: rust-cache
        uses: actions/cache@v4
        with:
          path: build/rust/
          key: ${{ runner.os }}-artifacts-rust-${{ github.run_id }}-${{ github.run_attempt }}
          restore-keys: |
            ${{ runner.os }}-artifacts-rust-${{ github.run_id }}-
            ${{ runner.os }}-artifacts-rust-
      - name: Copy Rust Config
        shell: bash
        run: cp ${{ matrix.os.config }} rust/config.toml
      - name: Build Rust
        shell: bash
        run: |
          mkdir -p build/rust build/dist
          export CCACHE_DIR="$(pwd)/build/rust/.ccache"
          export CCACHE_COMPRESS=1
          export CCACHE_COMPRESSLEVEL=6
          export CCACHE_MAXSIZE=400M
          mkdir -p build/rust/.ccache
          ccache -z
          cd rust && env -u GITHUB_ACTIONS ./x.py install
          ccache -s
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: oro-rust-toolchain-${{runner.os}}-${{github.run_id}}
          path: build/dist
          if-no-files-found: error
          compression-level: 9
          overwrite: true
